{"pxt.json":"{\n    \"name\": \"Grove\",\n    \"version\": \"0.1.0\",\n    \"description\": \"A Microsoft MakeCode package for Seeed Studio Grove module\",\n    \"license\": \"MIT\",\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"files\": [\n        \"README.md\",\n        \"main.ts\",\n        \"_locales/ja/Grove-strings.json\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"public\": true\n}","README.md":"# Grove\n\nA Microsoft MakeCode package for for Seeed Studio Grove module.\n\n## Basic usage\n\n### Grove - Gesture\n\nCreate gesture events.\n\n```blocks\ngrove.onGesture(GroveGesture.Up, () => {\n    basic.showString(\"Up\");\n})\ngrove.onGesture(GroveGesture.Down, () => {\n    basic.showString(\"Down\");\n})\n```\n\n### Grove - Ultrasonic Ranger\n\nMeasure distance in centimeters, specify the signal pin.\n\n```blocks\nlet distance = grove.measureInCentimeters(DigitalPin.P0);\n```\n\nMeasure distance in inches, specify the signal pin.\n\n```blocks\nlet distance = grove.measureInInches(DigitalPin.P0);\n```\n\n### Grove - 4 digital display\n\nCreate a 4 Digital Display driver, specify the clk and data pin, and set the brightness level, then start display value.\n\n```blocks\nlet display = grove.createDisplay(DigitalPin.P0, DigitalPin.P1);\ndisplay.set(7);\ndisplay.show(1234);\n```\n\nUse ``||bit||`` to display one bit number.\n\nUse ``||point||`` to open or close point dispay.\n\nUse ``||clear||`` to clean display.\n\n## License\n\nMIT\n\n## Supported targets\n\n* for PXT/microbit\n","main.ts":"\nconst initRegisterArray: number[] = [\n    0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17,\n    0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F,\n    0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14,\n    0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27,\n    0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01,\n    0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00,\n    0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20,\n    0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37,\n    0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A,\n    0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F,\n    0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30,\n    0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19,\n    0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04,\n    0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00,\n    0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00,\n    0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F,\n    0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07,\n    0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01,\n    0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F,\n    0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01,\n    0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40,\n    0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E,\n    0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00,\n    0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08,\n    0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00,\n    0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01,\n    0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01,\n    0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01\n];\n\nlet TubeTab: number [] = [\n    0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07,\n    0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71\n];\n\n/**\n * Grove Gestures\n */\nenum GroveGesture {\n    //% block=None\n    None = 0,\n    //% block=Right\n    Right = 1,\n    //% block=Left\n    Left = 2,\n    //% block=Up\n    Up = 3,\n    //% block=Down\n    Down = 4,\n    //% block=Forward\n    Forward = 5,\n    //% block=Backward\n    Backward = 6,\n    //% block=Clockwise\n    Clockwise = 7,\n    //% block=Anticlockwise\n    Anticlockwise = 8,\n    //% block=Wave\n    Wave = 9\n}\n\n/**\n * Functions to operate Grove module.\n */\n//% weight=10 color=#9F79EE icon=\"\\uf108\" block=\"Grove\"\nnamespace grove {\n    const gestureEventId = 3100;\n    let lastGesture = GroveGesture.None;\n    let paj7620: PAJ7620 = undefined;\n    let distanceBackup: number = 0;\n    /**\n     * Do something when a gesture is detected by Grove - Gesture\n     * @param gesture type of gesture to detect\n     * @param handler code to run\n     */\n    //% blockId=grove_gesture_create_event block=\"on Gesture|%gesture\"\n    export function onGesture(gesture: GroveGesture, handler: Action) {\n        control.onEvent(gestureEventId, gesture, handler);\n        if (!paj7620) {\n            paj7620.init();\n            control.inBackground(() => {\n                while(true) {\n                    const gesture = paj7620.read();\n                    if (gesture != lastGesture) {\n                        lastGesture = gesture;\n                        control.raiseEvent(gestureEventId, lastGesture);\n                    }\n                    basic.pause(50);\n                }\n            })\n        }\n    }\n    \n    /**\n     * Create a new driver of Grove - Ultrasonic Sensor to measure distances in cm\n     * @param pin signal pin of ultrasonic ranger module\n     */\n    //% blockId=grove_ultrasonic_centimeters block=\"Ultrasonic Sensor (in cm) at|%pin\"\n    export function measureInCentimeters(pin: DigitalPin): number\n    {\n        let duration = 0;\n        let RangeInCentimeters = 0;\n        \n        pins.digitalWritePin(pin, 0);\n        control.waitMicros(2);\n        pins.digitalWritePin(pin, 1);\n        control.waitMicros(20);\n        pins.digitalWritePin(pin, 0);        \n        duration = pins.pulseIn(pin, PulseValue.High, 50000); // Max duration 50 ms\n\n        RangeInCentimeters = duration * 153 / 29 / 2 / 100;\n               \n        if(RangeInCentimeters > 0) distanceBackup = RangeInCentimeters;\n        else RangeInCentimeters = distanceBackup;\n\n        basic.pause(50);\n        \n        return RangeInCentimeters;\n    }\n    \n    /**\n     * Create a new driver Grove - Ultrasonic Sensor to measure distances in inch\n     * @param pin signal pin of ultrasonic ranger module\n     */\n    //% blockId=grove_ultrasonic_inches block=\"Ultrasonic Sensor (in inch) at|%pin\"\n    export function measureInInches(pin: DigitalPin): number\n    {\n        let duration = 0;\n        let RangeInInches = 0;\n        \n        pins.digitalWritePin(pin, 0);\n        control.waitMicros(2);\n        pins.digitalWritePin(pin, 1);\n        control.waitMicros(20);\n        pins.digitalWritePin(pin, 0);        \n        duration = pins.pulseIn(pin, PulseValue.High, 100000); // Max duration 100 ms\n        \n        RangeInInches = duration * 153 / 74 / 2 / 100;\n        \n        if(RangeInInches > 0) distanceBackup = RangeInInches;\n        else RangeInInches = distanceBackup;\n        \n        basic.pause(50);\n        \n        return RangeInInches;\n    }\n    \n    /**\n     * Create a new driver Grove - 4-Digit Display\n     * @param clkPin value of clk pin number\n     * @param dataPin value of data pin number\n     */\n    //% blockId=grove_tm1637_create block=\"4-Digit Display at|%clkPin|and|%dataPin\"\n    export function createDisplay(clkPin: DigitalPin, dataPin: DigitalPin): TM1637\n    {\n        let display = new TM1637();\n        \n        display.buf = pins.createBuffer(4);\n        display.clkPin = clkPin;\n        display.dataPin = dataPin;\n        display.brightnessLevel = 0;\n        display.pointFlag = false;\n        display.clear();\n        \n        return display;\n    }\n    \n    /**\n     * \n     */\n    export class PAJ7620 {\n        private paj7620WriteReg(addr: number, cmd: number) {\n            let buf: Buffer = pins.createBuffer(2);\n\n            buf[0] = addr;\n            buf[1] = cmd;\n\n            pins.i2cWriteBuffer(0x73, buf, false);\n        }\n\n        private paj7620ReadReg(addr: number): number {\n            let buf: Buffer = pins.createBuffer(1);\n\n            buf[0] = addr;\n\n            pins.i2cWriteBuffer(0x73, buf, false);\n\n            buf = pins.i2cReadBuffer(0x73, 1, false);\n\n            return buf[0];\n        }\n\n        private paj7620SelectBank(bank: number) {\n            if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n            else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n        }\n\n        private paj7620Init() {\n            let temp = 0;\n\n            this.paj7620SelectBank(0);\n\n            temp = this.paj7620ReadReg(0);\n            if (temp == 0x20) {\n                for (let i = 0; i < 438; i += 2) {\n                    this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n                }\n            }\n\n            this.paj7620SelectBank(0);\n        }\n\n        /**\n         * Create a new driver of Grove - Gesture\n         */\n        //% blockId=grove_gesture_init block=\"%strip|initiate the Grove - Gesture\"\n        //% advanced=true\n        init() {\n            this.paj7620Init();\n            basic.pause(200);\n        }\n\n        /**\n         * Detect and recognize the gestures from Grove - Gesture\n         */\n        //% blockId=grove_gesture_read block=\"%strip|get gesture\"\n        //% advanced=true\n        read(): number {\n            let data = 0, result = 0;\n\n            data = this.paj7620ReadReg(0x43);\n            switch (data) {\n                case 0x01:\n                    result = GroveGesture.Right;\n                break;\n\n                case 0x02:\n                    result = GroveGesture.Left;\n                break;\n\n                case 0x04:\n                    result = GroveGesture.Up;\n                break;\n\n                case 0x08:\n                    result = GroveGesture.Down;\n                break;\n\n                case 0x10:\n                    result = GroveGesture.Forward;\n                break;\n\n                case 0x20:\n                    result = GroveGesture.Backward;\n                break;\n\n                case 0x40:\n                    result = GroveGesture.Clockwise;\n                break;\n\n                case 0x80:\n                    result = GroveGesture.Anticlockwise;\n                break;\n\n                default:\n                    data = this.paj7620ReadReg(0x44);\n                    if (data == 0x01)\n                        result = GroveGesture.Wave;\n                break;\n            }\n\n            return result;\n        }\n    }\n    \n    /**\n     * \n     */\n    export class TM1637\n    {\n        clkPin: DigitalPin;\n        dataPin: DigitalPin;\n        brightnessLevel: number;     \n        pointFlag: boolean;\n        buf: Buffer;\n\n        private writeByte(wrData: number) \n        {\n            for(let i = 0; i < 8; i ++)\n            {\n                pins.digitalWritePin(this.clkPin, 0);\n                if(wrData & 0x01)pins.digitalWritePin(this.dataPin, 1);\n                else pins.digitalWritePin(this.dataPin, 0);\n                wrData >>= 1;\n                pins.digitalWritePin(this.clkPin, 1);\n            }\n            \n            pins.digitalWritePin(this.clkPin, 0); // Wait for ACK\n            pins.digitalWritePin(this.dataPin, 1);\n            pins.digitalWritePin(this.clkPin, 1);\n        }\n        \n        private start()\n        {\n            pins.digitalWritePin(this.clkPin, 1);\n            pins.digitalWritePin(this.dataPin, 1);\n            pins.digitalWritePin(this.dataPin, 0);\n            pins.digitalWritePin(this.clkPin, 0);\n        }\n        \n        private stop()\n        {\n            pins.digitalWritePin(this.clkPin, 0);\n            pins.digitalWritePin(this.dataPin, 0);\n            pins.digitalWritePin(this.clkPin, 1);\n            pins.digitalWritePin(this.dataPin, 1);\n        }\n        \n        private coding(dispData: number): number\n        {\n            let pointData = 0;\n            \n            if(this.pointFlag == true)pointData = 0x80;\n            else if(this.pointFlag == false)pointData = 0;\n            \n            if(dispData == 0x7f)dispData = 0x00 + pointData;\n            else dispData = TubeTab[dispData] + pointData;\n            \n            return dispData;\n        } \n\n        /**\n         * Show a 4 digits number on display\n         * @param dispData value of number\n         */\n        //% blockId=grove_tm1637_display_number block=\"%strip|show number|%dispData\"\n        show(dispData: number)\n        {       \n            if(dispData < 10)\n            {\n                this.bit(dispData, 3);\n                this.bit(0x7f, 2);\n                this.bit(0x7f, 1);\n                this.bit(0x7f, 0);\n                \n                this.buf[3] = dispData;\n                this.buf[2] = 0x7f;\n                this.buf[1] = 0x7f;\n                this.buf[0] = 0x7f;\n            }\n            else if(dispData < 100)\n            {\n                this.bit(dispData % 10, 3);\n                this.bit((dispData / 10) % 10, 2);\n                this.bit(0x7f, 1);\n                this.bit(0x7f, 0);\n                \n                this.buf[3] = dispData % 10;\n                this.buf[2] = (dispData / 10) % 10;\n                this.buf[1] = 0x7f;\n                this.buf[0] = 0x7f;\n            }\n            else if(dispData < 1000)\n            {\n                this.bit(dispData % 10, 3);\n                this.bit((dispData / 10) % 10, 2);\n                this.bit((dispData / 100) % 10, 1);\n                this.bit(0x7f, 0);\n                \n                this.buf[3] = dispData % 10;\n                this.buf[2] = (dispData / 10) % 10;\n                this.buf[1] = (dispData / 100) % 10;\n                this.buf[0] = 0x7f;\n            }\n            else\n            {\n                this.bit(dispData % 10, 3);\n                this.bit((dispData / 10) % 10, 2);\n                this.bit((dispData / 100) % 10, 1);\n                this.bit((dispData / 1000) % 10, 0);\n                \n                this.buf[3] = dispData % 10;\n                this.buf[2] = (dispData / 10) % 10;\n                this.buf[1] = (dispData / 100) % 10;\n                this.buf[0] = (dispData / 1000) % 10;\n            }\n        }\n        \n        /**\n         * Set the brightness level of display at from 0 to 7\n         * @param level value of brightness level\n         */\n        //% blockId=grove_tm1637_set_display_level block=\"%strip|brightness level to|%level\"\n        //% level.min=0 level.max=7\n        set(level: number)\n        {\n            this.brightnessLevel = level;\n            \n            this.bit(this.buf[0], 0x00);\n            this.bit(this.buf[1], 0x01);\n            this.bit(this.buf[2], 0x02);\n            this.bit(this.buf[3], 0x03);\n        }\n        \n        /**\n         * Show a single number from 0 to 9 at a specified digit of Grove - 4-Digit Display\n         * @param dispData value of number\n         * @param bitAddr value of bit number\n         */\n        //% blockId=grove_tm1637_display_bit block=\"%strip|show single number|%dispData|at digit|%bitAddr\"\n        //% dispData.min=0 dispData.max=9\n        //% bitAddr.min=0 bitAddr.max=3\n        //% advanced=true\n        bit(dispData: number, bitAddr: number)\n        {\n            if((dispData == 0x7f) || ((dispData <= 9) && (bitAddr <= 3)))\n            {\n                let segData = 0;\n                \n                segData = this.coding(dispData);\n                this.start();\n                this.writeByte(0x44);\n                this.stop();\n                this.start();\n                this.writeByte(bitAddr | 0xc0);\n                this.writeByte(segData);\n                this.stop();\n                this.start();\n                this.writeByte(0x88 + this.brightnessLevel);\n                this.stop();\n                \n                this.buf[bitAddr] = dispData;\n            }\n        }\n        \n        /**\n         * Turn on or off the colon point on Grove - 4-Digit Display\n         * @param pointEn value of point switch\n         */\n        //% blockId=grove_tm1637_display_point block=\"%strip|turn|%point|colon point\"\n        //% advanced=true\n        point(point: boolean)\n        {\n            this.pointFlag = point;\n            \n            this.bit(this.buf[0], 0x00);\n            this.bit(this.buf[1], 0x01);\n            this.bit(this.buf[2], 0x02);\n            this.bit(this.buf[3], 0x03);\n        }\n        \n        /**\n         * Clear the display\n         */\n        //% blockId=grove_tm1637_display_clear block=\"%strip|clear\"\n        //% advanced=true\n        clear()\n        {\n            this.bit(0x7f, 0x00);\n            this.bit(0x7f, 0x01);\n            this.bit(0x7f, 0x02);\n            this.bit(0x7f, 0x03);\n        }\n    }\n}","_locales/ja/Grove-strings.json":"{\n  \"{id:category}Grove\": \"Grove\",\n  \"GroveGesture.None|block\": \"なし\",\n  \"GroveGesture.Right|block\": \"右に\",\n  \"GroveGesture.Left|block\": \"左に\",\n  \"GroveGesture.Up|block\": \"上に\",\n  \"GroveGesture.Down|block\": \"下に\",\n  \"GroveGesture.Forward|block\": \"前進\",\n  \"GroveGesture.Backward|block\": \"後退\",\n  \"GroveGesture.Clockwise|block\": \"時計回りに\",\n  \"GroveGesture.Anticlockwise|block\": \"反時計回りに\",\n  \"GroveGesture.Wave|block\": \"手振り\",\n  \"grove.onGesture|block\": \"[Grove - ジェスチャーセンサー]|%gesture|ジェスチャーしたとき\",\n  \"grove.measureInCentimeters|block\": \"[Grove - 超音波距離センサー]|距離(cm)を読み取る 端子|%pin\",\n  \"grove.measureInInches|block\": \"[Grove - 超音波距離センサー]|距離(inch)を読み取る 端子|%pin\",\n  \"grove.createDisplay|block\": \"[Grove - 4桁ディスプレイ]|端子|%clkPin|と端子|%dataPin\",\n  \"grove.PAJ7620.init|block\": \"%strip|[Grove - ジェスチャーセンサー]|初期化する\",\n  \"grove.PAJ7620.read|block\": \"%strip|[Grove - ジェスチャーセンサー]|ジェスチャーを読み取る\",\n  \"grove.TM1637.show|block\": \"%strip|[Grove - 4桁ディスプレイ]|%dispData|を表示する\",\n  \"grove.TM1637.set|block\": \"%strip|[Grove - 4桁ディスプレイ]|明るさを|%level|に変更する\",\n  \"grove.TM1637.bit|block\": \"%strip|[Grove - 4桁ディスプレイ]|%dispData|を|%bitAddr|桁目に表示する\",\n  \"grove.TM1637.point|block\": \"%strip|[Grove - 4桁ディスプレイ]|コロンの表示を|%point|に変更する\",\n  \"grove.TM1637.clear|block\": \"%strip|[Grove - 4桁ディスプレイ]|表示を消す\"\n}","test.ts":"grove.onGesture(GroveGesture.Up, () => {\n    basic.showString(\"U\")\n})\ngrove.onGesture(GroveGesture.Down, () => {\n    basic.showString(\"D\")\n})\ngrove.onGesture(GroveGesture.Right, () => {\n    basic.showString(\"R\")\n})\ngrove.onGesture(GroveGesture.Left, () => {\n    basic.showString(\"L\")\n})\ngrove.onGesture(GroveGesture.Wave, () => {\n    basic.showString(\"W\")\n})\ngrove.onGesture(GroveGesture.Clockwise, () => {\n    basic.showString(\"C\")\n})\ngrove.onGesture(GroveGesture.Anticlockwise, () => {\n    basic.showString(\"A\")\n})\n\n{\n    let display = grove.createDisplay(DigitalPin.P0, DigitalPin.P1);\n    let data = 0;\n\n    display.point(true);\n    display.clear();\n    display.bit(3, 3);\n    basic.pause(500);\n    \n    display.point(false);\n    display.clear();\n    display.bit(2, 2);\n    basic.pause(500);\n    \n    display.point(true);\n    display.clear();\n    display.bit(1, 1);\n    basic.pause(500);\n    \n    display.point(false);\n    display.clear();\n    display.bit(0, 0);\n    basic.pause(500);\n    \n    display.set(7);\n    \n    while(true)\n    {\n        display.show(data ++);\n        let distance = grove.measureInCentimeters(DigitalPin.P0);\n        basic.showNumber(distance);\n        basic.pause(500);\n    }\n}"}